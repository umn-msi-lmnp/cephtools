


# ---------------------------------------------------------------------
# bucketpolicy
# ---------------------------------------------------------------------

describe "bucketpolicy" <<HEREDOC
---------------------------------------------------------------------
Usage:
    ${_ME} bucketpolicy [options] --bucket <BUCKET> --policy <POLICY_OPTION> --list user1000,user2000

Options:
    -b|--bucket <STRING>    Name of the ceph bucket for policy. Required.

    -m|--make_bucket        If the bucket does not exist, make it. [Default = buckets are not created
                            but policies will be adjusted if a bucket already exists.]

    -p|--policy <STRING>    What policy should be created? [Default = "GROUP_READ"]
                            Policy options: 
                                NONE: Removes any policy currently set.
                                GROUP_READ: Allows all current memebers of the MSI group 
                                    read-only access to the bucket. 
                                GROUP_READ_WRITE: Allows all current memebers of the MSI 
                                    group read and write access to the bucket.
                                OTHERS_READ: Allows anyone read-only access to the bucket
                                    (i.e. world public read-only access). WARNING: this
                                    policy will expose all files in the bucket to the 
                                    entire Internet for viewing or downloading. However,
                                    this can be a good option for hosting a public static
                                    website.
                                LIST_READ: Allows a specific list of users to have read-only 
                                    access to the bucket. Must be a comma separated x500 
                                    list without spaces.
                                LIST_READ_WRITE: Allows a specific list of users to have 
                                    read and write access to the bucket. Must be a comma 
                                    separated x500 list without spaces.
                                    
    -g|--group <STRING>     MSI group id. Required only if "--policy GROUP_READ" is
                            specified.
    
    -n|--do_not_setpolicy   If specified, the policy will be created (i.e. written to
                            file) but it will not be set on the bucket.
                            
    -l|--list               Provide a list of user ids for the particular policy setting
    
    -v|--verbose            Verbose mode (print additional info).


Description:
  Create and set bucket policies for tier 2 (ceph).
  
Help (print this screen):
    ${_ME} help bucketpolicy

Version: ${VERSION_SHORT}
Questions: Todd Knutson (knut0297@umn.edu) or Christine O'Connor (oconnorc@umn.edu)
GitHub: https://github.umn.edu/lmnp/cephtools
---------------------------------------------------------------------
HEREDOC

bucketpolicy() {
#     echo ALL ARGS:
#     echo "${@:-}"
#     echo "${#}"


    
    # Parse Options ###############################################################

    # Initialize program option variables.
    local _bucket=
    local _make_bucket=
    local _policy="GROUP_READ"
    local _group=
    local _do_not_setpolicy=0
    local _verbose=0
    local _list=

    # __get_option_value()
    #
    # Usage:
    #   __get_option_value <option> <value>
    #
    # Description:
    #  Given a flag (e.g., -e | --example) return the value or exit 1 if value
    #  is blank or appears to be another option.
    __get_option_value() {
      local __arg="${1:-}"
      local __val="${2:-}"
      
      if [[ -n "${__val:-}" ]] && [[ ! "${__val:-}" =~ ^- ]]
      then
        printf "%s\\n" "${__val}"
      else
        _exit_1 printf "%s requires a valid argument.\\n" "${__arg}"
      fi
    }


    # For flags (i.e. no corresponding value), do not shift inside the case testing
    # statement. For options with required value, shift inside case testing statement, 
    # so the loop moves twice. 
    while ((${#}))
    do
        __arg="${1:-}"
        __val="${2:-}"

        case "${__arg}" in
        -v|--verbose)
            _verbose=1
            ;;
        -m|--make_bucket)
            _make_bucket=1
            ;;
        -n|--do_not_setpolicy)
            _do_not_setpolicy=1
            ;;
        -b|--bucket)
            _bucket="$(__get_option_value "${__arg}" "${__val:-}")"
            shift
            ;;
        -p|--policy)
            _policy="$(__get_option_value "${__arg}" "${__val:-}")"
            shift
            ;;
        -g|--group)
            _group="$(__get_option_value "${__arg}" "${__val:-}")"
            shift
            ;;
        -l|--list)
            _list="$(__get_option_value "${__arg}" "${__val:-}")"
            shift
            ;;
        --endopts)
            # Terminate option parsing.
            break
            ;;
        -*)
            _exit_1 printf "Unexpected option: %s\\n" "${__arg}"
            ;;
        *)
            describe --get bucketpolicy
            _exit_1 printf "Unexpected positional arg: %s\\n" "${__arg}"
            ;;
        esac

        shift
    done


    # ---------------------------------------------------------------------
    # Check and print input options
    # ---------------------------------------------------------------------

    _verb printf -- "Program options used:\\n"
    _verb printf -- "--bucket: %s\\n" "$_bucket"
    _verb printf -- "--make_bucket: %s\\n" "$_make_bucket"
    _verb printf -- "--policy: %s\\n" "$_policy"
    _verb printf -- "--group: %s\\n" "$_group"
    _verb printf -- "--verbose: %s\\n" "$_verbose"
    _verb printf -- "--list: %s\\n" "$_list"
    _verb printf -- "--do_not_setpolicy: %s\\n" "$_do_not_setpolicy"


    # If required options are empty or null, exit.
    if [ -z "${_bucket}" ]
    then
        _exit_1 printf "The '--bucket' option must be specified and not be empty or null.\\n"
    fi
    
    _policy_options=(NONE GROUP_READ GROUP_READ_WRITE OTHERS_READ LIST_READ LIST_READ_WRITE)
    if ! _contains "${_policy}" "${_policy_options[@]}"
    then
        local _str
        printf -v _str '%s ' "${_policy_options[@]}"
        _exit_1 printf "The '--policy' option must be specified as one of: %s\\n" "${_str}"
    fi
    
    if [[ "${_policy}" =~ ^.*GROUP.*$ ]]
    then
        if [ -z "${_group}" ]
        then
            _exit_1 printf "The '--group' option must be specified and not be empty or null when using --policy=GROUP_*\\n"
        fi
    fi
    

    # ---------------------------------------------------------------------
    # Check s3cmd specific info
    # ---------------------------------------------------------------------

    S3CMD="$(which s3cmd)"
    if command -v s3cmd &> /dev/null
    then
        _verb printf "Using s3cmd found in PATH: %s\\n" "$(which s3cmd)"
        _verb printf "%s\\n" "$(s3cmd --version)" 
    else
        _exit_1 printf "s3cmd could not be found in PATH\\n"
    fi

    # Make sure access to bucket is possible
    if ! s3cmd ls s3://${_bucket} &>/dev/null; then
        if ((make_bucket))
        then
            if s3cmd mb s3://${_bucket} &>/dev/null; then
                s3cmd mb s3://${_bucket}
                _info printf "Bucket was made: %s" "${_bucket}"
            else
                _exit_1 printf "Errors occured when trying to make bucket: '%s'\\nCheck the bucket access policy using 's3cmd info s3://%s'\\n" "${_bucket}" "${_bucket}"
            fi
        else
            _exit_1 printf "Errors occured when accessing bucket: '%s'\\nDo you have access rights to the bucket?\\nCheck the bucket access policy using 's3cmd info s3://%s'\\n" "${_bucket}" "${_bucket}"
        fi
    else
        _exit_1 printf "Errors occured when accessing bucket: '%s'\\nDo you have access rights to the bucket?\\nCheck the bucket access policy using 's3cmd info s3://%s'\\n" "${_bucket}" "${_bucket}"
    fi




    # ---------------------------------------------------------------------
    # Create bucket policy vars
    # ---------------------------------------------------------------------

    _curr_date_time="$(date +"%Y-%m-%d-%H%M%S")"
    _bucket_policy="${_bucket}.bucket_policy.json"
    _bucket_policy_readme="${_bucket}.bucket_policy_readme.md"




    # ---------------------------------------------------------------------
    # Get group user ids
    # ---------------------------------------------------------------------

    if [[ "${_policy}" =~ ^.*GROUP.*$ ]]
    then
    
        # Find all usernames in the group
        _username_msi_csv="$(getent group "${_group}" | cut -d":" -f4-)"

        readarray -t _username_msi <<< "$(printf "%s\\n" "${_username_msi_csv}" | sed -e 'y/,/\n/')"


        # Use the MSI user id (uid) with the "s3info" function (if possible) to return the ceph username. Generate a comma 
        # separated list of ceph usernames for each MSI user. This entire concatenated string will be supplied
        # to the bucket policy.
        _all_ceph_username_string=()
        _username_ceph=()
        _username_ceph_msi=()
        for i in "${!_username_msi[@]}"
        do
            if s3info info --user "${_username_msi[$i]}" &>/dev/null
            then
                _curr_ceph_username="$(s3info info --user "${_username_msi[$i]}" | grep "Tier 2 username" | sed 's/Tier 2 username: //')"
                _username_ceph+=("${_curr_ceph_username}")
                _username_ceph_msi+=("${_username_msi[$i]}")
                _curr_ceph_username_string="\"arn:aws:iam:::user/${_curr_ceph_username}\""
                if [ "${#_all_ceph_username_string[@]}" -eq 0 ]; then
                    _all_ceph_username_string+="${_curr_ceph_username_string}"
                else
                    _all_ceph_username_string+=",${_curr_ceph_username_string}"
                fi
            else
                _warn printf "s3info info command failed for username: %s.\\n" "${_username_msi[$i]}"
            fi
        done
        # Copy variable to another name for README file
        _users_with_access=(${_username_ceph_msi[@]})
    elif [[ "${_policy}" =~ ^.*OTHERS.*$ ]]
    then
        _users_with_access="All MSI users and the entire public Internet"
    elif [[ "${_policy}" =~ ^.*LIST.*$ ]]
    then
        # Read in the specific users in the VIP list file
        #_username_msi_csv="$(getent group "${_group}" | cut -d":" -f4-)"
        _username_msi_csv="$(cat ${_list})"
        readarray -t _username_msi <<< "$(printf "%s\\n" "${_username_msi_csv}" | sed -e 'y/,/\n/')"
	# 

        # Use the MSI user id (uid) with the "s3info" function (if possible) to return the ceph username. Generate a comma 
        # separated list of ceph usernames for each MSI user. This entire concatenated string will be supplied
        # to the bucket policy.
        _all_ceph_username_string=()
        _username_ceph=()
        _username_ceph_msi=()
        for i in "${!_username_msi[@]}"
        do
            if s3info info --user "${_username_msi[$i]}" &>/dev/null
            then
                _curr_ceph_username="$(s3info info --user "${_username_msi[$i]}" | grep "Tier 2 username" | sed 's/Tier 2 username: //')"
                _username_ceph+=("${_curr_ceph_username}")
                _username_ceph_msi+=("${_username_msi[$i]}")
                _curr_ceph_username_string="\"arn:aws:iam:::user/${_curr_ceph_username}\""
                if [ "${#_all_ceph_username_string[@]}" -eq 0 ]; then
                    _all_ceph_username_string+="${_curr_ceph_username_string}"
                else
                    _all_ceph_username_string+=",${_curr_ceph_username_string}"
                fi
            else
                _warn printf "s3info info command failed for username: %s.\\n" "${_username_msi[$i]}"
            fi
        done
        # Copy variable to another name for README file
        _users_with_access=(${_username_ceph_msi[@]})
    fi



    # ---------------------------------------------------------------------
    # Create and write the bucket policies
    # ---------------------------------------------------------------------

    # Make sure your JSON file is correctly formatted: 
    # https://jsonlint.com

    # Ceph docs:
    # https://docs.ceph.com/en/latest/radosgw/bucketpolicy/
    # The Ceph Object Gateway supports a subset of the Amazon S3 policy language applied to buckets.
    # Ceph does not support groups or usernames. Must use individual uid for each user.




    if _contains "${_policy}" "NONE"
    then
        tee "${_bucket_policy}" << HEREDOC > /dev/null

HEREDOC
    elif _contains "${_policy}" "GROUP_READ"
    then
        tee "${_bucket_policy}" << HEREDOC > /dev/null
{
    "Version": "2012-10-17",
    "Statement": [
    {
        "Effect": "Allow",
        "Principal": {"AWS": [
            ${_all_ceph_username_string}
        ]},
        "Action": [
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketPolicy",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetObjectAcl",
            "s3:GetObject",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectVersion"
        ],
        "Resource": ["arn:aws:s3:::${_bucket}/*", "arn:aws:s3:::${_bucket}"]
        }
    ]
}

HEREDOC
    elif _contains "${_policy}" "GROUP_READ_WRITE"
    then
        tee "${_bucket_policy}" << HEREDOC > /dev/null
{
    "Version": "2012-10-17",
    "Statement": [
    {
        "Effect": "Allow",
        "Principal": {"AWS": [
            ${_all_ceph_username_string}
        ]},
        "Action": [
            "s3:*"
        ],
        "Resource": ["arn:aws:s3:::${_bucket}/*", "arn:aws:s3:::${_bucket}"]
        }
    ]
}

HEREDOC
    elif _contains "${_policy}" "LIST_READ"
    then
        tee "${_bucket_policy}" << HEREDOC > /dev/null
{
    "Version": "2012-10-17",
    "Statement": [
    {
        "Effect": "Allow",
        "Principal": {"AWS": [
            ${_all_ceph_username_string}
        ]},
        "Action": [
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketPolicy",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetObjectAcl",
            "s3:GetObject",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectVersion"
        ],
        "Resource": ["arn:aws:s3:::${_bucket}/*", "arn:aws:s3:::${_bucket}"]
        }
    ]
}

HEREDOC
    elif _contains "${_policy}" "LIST_READ_WRITE"
    then
        tee "${_bucket_policy}" << HEREDOC > /dev/null
{
    "Version": "2012-10-17",
    "Statement": [
    {
        "Effect": "Allow",
        "Principal": {"AWS": [
            ${_all_ceph_username_string}
        ]},
        "Action": [
            "s3:*"
        ],
        "Resource": ["arn:aws:s3:::${_bucket}/*", "arn:aws:s3:::${_bucket}"]
        }
    ]
}


HEREDOC
    elif _contains "${_policy}" "OTHERS_READ"
    then
        tee "${_bucket_policy}" << HEREDOC > /dev/null
{
    "Version": "2012-10-17",
    "Statement": [
    {
        "Sid":"PublicRead",
        "Effect": "Allow",
        "Principal": "*",
        "Action": [
            "s3:GetObject",
            "s3:GetObjectVersion"
        ],
        "Resource": ["arn:aws:s3:::${_bucket}/*", "arn:aws:s3:::${_bucket}"]
        }
    ]
}

HEREDOC
    else
        _exit_1 printf "The '--policy' option is not recognized."
    fi
    
    



    # ---------------------------------------------------------------------
    # Apply bucket policy
    # ---------------------------------------------------------------------

    if ((_do_not_setpolicy))
    then
        _verb printf "The '--do_not_setpolicy' option was specified. The bucket policy will not be set.\\n"
    else
        if _contains "${_policy}" "NONE"
        then
            if s3cmd delpolicy s3://${_bucket} &>/dev/null
            then
                _info printf "The bucket policy was removed.\\n"
            else
                _warn printf "The 's3cmd delpolicy' command failed.\\n"
            fi

        else
            if s3cmd setpolicy ${_bucket_policy} s3://${_bucket} &>/dev/null
            then
                _info printf "The bucket policy was set.\\n"
            else
                _warn printf "The 's3cmd setpolicy' command failed.\\n"
            fi
        fi
    fi






    # ---------------------------------------------------------------------
    # Summary readme
    # ---------------------------------------------------------------------



    if _contains "${_policy}" "NONE"
    then
        tee "${_bucket_policy_readme}" << HEREDOC > /dev/null 
# cephtools bucketpolicy readme

## Options

Bucket policy initated (Y-m-d-HMS):  
${_curr_date_time} 

Options used:
bucket=${_bucket}
policy=${_policy}
do_not_setpolicy=${_do_not_setpolicy}
policy_json=${_bucket}.bucket_policy.json


VERSION: ${VERSION_SHORT}
QUESTIONS: Todd Knutson (knut0297@umn.edu)
REPO: https://github.umn.edu/knut0297org/cephtools

## Policy

Any bucket policy that was present was removed. 

HEREDOC
    else
        tee "${_bucket_policy_readme}" << HEREDOC > /dev/null 
# cephtools bucketpolicy summary

## Options used

Bucket policy initated (Y-m-d-HMS):  
${_curr_date_time}  


\`\`\`
bucket=${_bucket}  
policy=${_policy}  
do_not_setpolicy=${_do_not_setpolicy}  
policy_json=${_bucket}.bucket_policy.json  
\`\`\`


VERSION: ${VERSION_SHORT}  
QUESTIONS: Todd Knutson (knut0297@umn.edu)  
REPO: https://github.umn.edu/knut0297org/cephtools  


## MSI users included in the access policy

\`\`\`
$(printf "%s\n" "${_users_with_access[@]}")
\`\`\`


## Ceph Actions enabled

See the ceph documentation for details:

[https://docs.ceph.com/en/latest/radosgw/bucketpolicy/](https://docs.ceph.com/en/latest/radosgw/bucketpolicy/)

See all "Actions" listed in the policy JSON file:  
\`${_bucket}.bucket_policy.json\`


HEREDOC
    fi



    # ---------------------------------------------------------------------
    # Allow permissions for group
    # ---------------------------------------------------------------------

    chmod ug+rw,o-rwx "${_bucket}.bucket_policy_readme.md"
    chmod ug+rw,o-rwx "${_bucket}.bucket_policy.json"






    #######################################################################
    # Print instructions to terminal
    #######################################################################



    #read -r -d '' instructions_message << EOF > /dev/null
    # The unix "read" command does not return a zero exit code. Use a temp function instead.
    # https://stackoverflow.com/a/8088167/2367748
    heredoc2var(){ IFS='\n' read -r -d '' ${1} || true; }
    
    heredoc2var instructions_message << HEREDOC > /dev/null

---------------------------------------------------------------------
cephtools bucketpolicy summary

The bucket policy was modified for ceph bucket:
${_bucket}

Next steps:
1. Review the readme file for details: ${_bucket}.bucket_policy_readme.md
2. Review the JSON bucket policy for details: ${_bucket}.bucket_policy.json
3. Repeat this process with new group members are added or removed, so the policy is updated.


VERSION: ${VERSION_SHORT}
QUESTIONS: Todd Knutson (knut0297@umn.edu)
REPO: https://github.umn.edu/knut0297org/cephtools
---------------------------------------------------------------------
HEREDOC


    echo "$instructions_message"
}



